# Pokemon Server

```elixir
Mix.install([
  {:kino, "~> 0.7.0", override: true},
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"}
])
```

## Navigation

[Return Home](../start.livemd)<span style="padding: 0 30px"></span>
[Report An Issue](https://github.com/DockYard-Academy/beta_curriculum/issues/new?assignees=&labels=&template=issue.md&title=)

## Setup

Ensure you type the `ea` keyboard shortcut to evaluate all Elixir cells before starting. Alternatively you can evaluate the Elixir cells as you read.

## Overview

You're going to create a pokemon battle game with persistence.

Each Pokemon will be a [GenServer](https://hexdocs.pm/elixir/GenServer.html) process storing the pokemon's stats in state.

<!-- livebook:{"break_markdown":true} -->

```mermaid
classDiagram
 class Pokemon {
  health: 20
  attack: 5
  type: :fire
  name: "charmander"
 }
```

<!-- livebook:{"break_markdown":true} -->

Pokemon can attack each other. An attack should update the `Pokemon`'s health in the [GenServer](https://hexdocs.pm/elixir/GenServer.html)'s state.

## Create Pokemon Server

Create a `Pokemon` module which will be a [GenServer](https://hexdocs.pm/elixir/GenServer.html) and a struct definition. It should store the following in values in state. You do not need to validate these values, you can assume each will be the following:

* `:name` will be a string.
* `:type` will be an atom of either `:grass`, `:water`, or `:fire`
* `:health` will be an integer with a default value of `20`
* `:attack` will be an integer with a default value of `5`

You should be able to create a `Pokemon` struct.

<!-- livebook:{"force_markdown":true} -->

```elixir
%Pokemon{name: "Charmander", type: :fire, health: 20, attack: 5}
```

`Pokemon` [GenServer](https://hexdocs.pm/elixir/GenServer.html)s should be able to attack one another. This should subtract one pokemon's `:attack` from the other pokemon's `:health`, and update the value in the state of the [GenServer](https://hexdocs.pm/elixir/GenServer.html). A pokemon's health should not be able to fall below `0`.

<!-- livebook:{"force_markdown":true} -->

```elixir
attacker = Pokemon.start_link(pokemon: %Pokemon{name: "Bulbasaur1", type: :grass})
defender = Pokemon.start_link(pokemon: %Pokemon{name: "Bulbasaur2", type: :grass})

Pokemon.attack(attacker, defender)
%Pokemon{name: "Bulbasaur1", type: :grass, health: 15, attack: 20}
```

### Type Advantages and Weaknesses

Multiply the damage dealt by an attack by `2` if the attacker has a type advantage. Multiply the damage applied by `0.5` if the attacker has a type weakness.

Type Advantages are:

* fire -> grass
* grass -> water
* water -> fire

Type weaknesses are:

* fire -> water
* grass -> fire
* water -> grass

<details style="background-color: lightgreen; padding: 1rem; margin: 1rem 0;">
  <summary>Example Solution</summary>

```elixir
defmodule Pokemon do
  use GenServer
  @enforce_keys [:name, :type]
  defstruct @enforce_keys ++ [health: 20, attack: 5]

  def start_link(opts \\ []) do
    {pokemon, opts} = Keyword.pop!(opts, :pokemon)
    GenServer.start_link(__MODULE__, pokemon, opts)
  end

  @impl true
  def init(state) do
    {:ok, state}
  end

  def attack(attacker, defender) do
    attacker_type = Pokemon.get(attacker, :type)
    defender_type = Pokemon.get(defender, :type)
    damage_amount = Pokemon.get(attacker, :attack) * multiplier(attacker_type, defender_type)
    GenServer.call(defender, {:apply_damage, damage_amount})
  end

  def multiplier(attacker_type, defender_type) do
    case {attacker_type, defender_type} do
      {:fire, :grass} -> 2
      {:grass, :water} -> 2
      {:water, :fire} -> 2
      {:fire, :water} -> 0.5
      {:grass, :fire} -> 0.5
      {:water, :grass} -> 0.5
      _ -> 1
    end
  end

  def get(pokemon, key) do
    GenServer.call(pokemon, {:get, key})
  end

  def handle_call({:get, key}, _from, pokemon) do
    {:reply, Map.get(pokemon, key), pokemon}
  end

  @impl true
  def handle_call({:apply_damage, amount}, _from, pokemon) do
    updated_pokemon = Map.update!(pokemon, :health, fn health -> max(health - amount, 0) end)
    {:reply, updated_pokemon, updated_pokemon}
  end
end
```

</details>

Implement the `Pokemon` GenServer and struct definition as documented below.

```elixir
defmodule Pokemon do
  @moduledoc """
  Pokemon Server

  Defines a Pokemon GenServer and struct.

  ## Examples

    iex> %Pokemon{name: "Charmander", type: :fire}
    %Pokemon{name: "Charmander", type: :fire, health: 20, attack: 5}
  """
  use GenServer

  @enforce_keys [:name, :type]
  defstruct @enforce_keys ++ [health: 20, attack: 5, alive: true]

  @attack_mods %{
    {:fire, :grass} => 2,
    {:grass, :water} => 2,
    {:water, :fire} => 2,
    {:fire, :water} => 0.5,
    {:grass, :fire} => 0.5,
    {:water, :grass} => 0.5
  }

  @impl
  def init(opts) do
    {:ok, {opts[:pokemon]}}
  end

  def handle_call(:get_state, _, {poke}) do
    {:reply, poke, {poke}}
  end

  def handle_call(:died, _, {poke}) do
    new_poke = %Pokemon{poke | alive: false}
    {:reply, new_poke, {new_poke}}
  end

  def handle_call({:update_health, health}, _, {poke}) do
    new_poke = %Pokemon{poke | health: health}
    {:reply, new_poke, {new_poke}}
  end

  def get_state(pid) do
    GenServer.call(pid, :get_state)
  end

  defp update_health(pid, health) do
    if health <= 0 do
      GenServer.call(pid, :died)
    end

    GenServer.call(pid, {:update_health, health})
  end

  @doc """
  Start the Pokemon GenServer.

  ## Examples
      iex> {:ok, pokemon} = Pokemon.start_link([pokemon: %Pokemon{name: "Charmander", type: :fire}])
  """
  def start_link([] \\ []) do
    {:error, "Send in a Pokemon"}
  end

  def start_link(opts) do
    GenServer.start_link(__MODULE__, opts)
  end

  def start_random() do
    type = [:grass, :water, :fire] |> Enum.random()
    health = 15..34 |> Enum.random()
    attack = 9 - floor(health / 5)
    name = "#{type}y #{Enum.random(1..99)}"
    poke = %Pokemon{name: name, type: type, health: health, attack: attack}
    start_link(pokemon: poke)
  end

  @doc """
  Apply the attacker's attack damage to the defender's health.

  ## Examples

    With default values.
      iex> {:ok, attacker} = Pokemon.start_link(pokemon: %Pokemon{name: "Bulbasaur1", type: :grass})
      iex> {:ok, defender} = Pokemon.start_link(pokemon: %Pokemon{name: "Bulbasaur2", type: :grass})
      iex> Pokemon.attack(attacker, defender)
      %Pokemon{name: "Bulbasaur2", type: :grass, health: 15, attack: 5}
      iex> Pokemon.attack(attacker, defender)
      %Pokemon{name: "Bulbasaur2", type: :grass, health: 10, attack: 5}
      iex> Pokemon.attack(attacker, defender)
      %Pokemon{name: "Bulbasaur2", type: :grass, health: 5, attack: 5}
      iex> Pokemon.attack(attacker, defender)
      %Pokemon{name: "Bulbasaur2", type: :grass, health: 0, attack: 5}
      iex> Pokemon.attack(attacker, defender)
      %Pokemon{name: "Bulbasaur2", type: :grass, health: 0, attack: 5}

    With type advantage

      iex> {:ok, attacker} = Pokemon.start_link(pokemon: %Pokemon{name: "Charmander", type: :fire})
      iex> {:ok, defender} = Pokemon.start_link(pokemon: %Pokemon{name: "Bulbasaur", type: :grass})
      iex> Pokemon.attack(attacker, defender)
      %Pokemon{name: "Bulbasaur", type: :grass, health: 10, attack: 5}

    With type weakness

      iex> {:ok, attacker} = Pokemon.start_link(pokemon: %Pokemon{name: "Bulbasaur", type: :grass})
      iex> {:ok, defender} = Pokemon.start_link(pokemon: %Pokemon{name: "Charmander", type: :fire})
      iex> Pokemon.attack(attacker, defender)
      %Pokemon{name: "Charmander", type: :fire, health: 17.5, attack: 5}

    Ensure you use the attacking pokemon's attack number to apply damage to the defending pokemon's health.

      iex> {:ok, attacker} = Pokemon.start_link(pokemon: %Pokemon{name: "Bulbasaur1", type: :grass, attack: 20})
      iex> {:ok, defender} = Pokemon.start_link(pokemon: %Pokemon{name: "Bulbasaur2", type: :grass, health: 45})
      iex> Pokemon.attack(attacker, defender)
      %Pokemon{name: "Bulbasaur2", type: :grass, health: 25, attack: 5}
  """
  def calculate_damage(att_poke, def_poke) do
    mod = @attack_mods[{att_poke.type, def_poke.type}] || 1
    att_poke.attack * mod
  end

  def attack(att_pid, def_pid) do
    att_poke = get_state(att_pid)
    def_poke = get_state(def_pid)
    damage_amt = calculate_damage(att_poke, def_poke)
    rem_health = def_poke.health - damage_amt
    update_health(def_pid, rem_health)
  end
end
```

```elixir
p = %Pokemon{name: "Charmander", type: :fire}
```

```elixir
Pokemon.start_random()
```

```elixir
{_, att_pid} = Pokemon.start_link(pokemon: %Pokemon{name: "Charmander", type: :fire})
{_, def_pid} = Pokemon.start_link(pokemon: %Pokemon{name: "Bulbasaur", type: :grass, health: 25})
```

```elixir
Pokemon.attack(def_pid, att_pid)
```

```elixir
GenServer.call(def_pid, :get_state)
```

```elixir
defmodule PokemonBattledome do
  use GenServer

  @num_poke 5

  @impl
  def init(count) do
    pids =
      1..count
      |> Enum.map(fn i ->
        {:ok, pid} = Pokemon.start_random()
        pid
      end)

    {:ok, pids}
  end

  def handle_call(:round, _, pids) do
    response =
      Enum.map(pids, fn pid ->
        other_pids = pids -- [pid]
        def_pid = Enum.random(other_pids)
        Pokemon.attack(pid, def_pid)
      end)

    new_pids =
      Enum.filter(pids, fn pid ->
        poke = Pokemon.get_state(pid)
        poke.alive == true
      end)

    {:reply, response, new_pids}
  end

  def handle_call(:status, _, pids) do
    response =
      Enum.map(pids, fn pid ->
        Pokemon.get_state(pid)
      end)

    {:reply, response, pids}
  end

  def start_link(count \\ @num_poke) do
    GenServer.start_link(__MODULE__, count)
  end

  def fight(pid) do
    GenServer.call(pid, :round)
  end

  def status(pid) do
    GenServer.call(pid, :status)
  end
end
```

```elixir
{:ok, dome} = PokemonBattledome.start_link(5)
PokemonBattledome.status(dome)
```

```elixir
PokemonBattledome.fight(dome)
```

```elixir
PokemonBattledome.status(dome)
```

## Commit Your Progress

Run the following in your command line from the curriculum folder to track and save your progress in a Git commit.
Ensure that you do not already have undesired or unrelated changes by running `git status` or by checking the source control tab in Visual Studio Code.

```
$ git checkout main
$ git checkout -b exercise-pokemon_server
$ git add .
$ git commit -m "finish pokemon server exercise"
$ git push origin exercise-pokemon_server
```

Create a pull request to your forked `main` branch. Please do not create a pull request to the DockYard Academy repository as this will spam our PR tracker.

**DockYard Academy Students Only:**

Notify your teacher by including `@BrooklinJazz` in your PR description to get feedback.

If you are interested in joining the next academy cohort, [sign up here](https://academy.dockyard.com/) to receive more news when it is available.

## Up Next

| Previous                                                         | Next                                               |
| ---------------------------------------------------------------- | -------------------------------------------------: |
| [Traffic Light Server](../exercises/traffic_light_server.livemd) | [Async Messages](../reading/async_messages.livemd) |
