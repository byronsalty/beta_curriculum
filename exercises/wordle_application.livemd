# Wordle

```elixir
Mix.install([
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"},
  {:tested_cell, github: "brooklinjazz/tested_cell"},
  {:utils, path: "#{__DIR__}/../utils"}
])
```

## Navigation

[Return Home](../start.livemd)<span style="padding: 0 30px"></span>
[Report An Issue](https://github.com/DockYard-Academy/beta_curriculum/issues/new?assignees=&labels=&template=issue.md&title=)

## Wordle

In your existing [Games](./games_setup.livemd) project, you're going to create a Wordle game.

Wordle is a popular game where players get six attempts to guess a word.
They are given feedback clues to guess the word.

* **Green** if the letter is in the word and in the correct spot.
* **Yellow** if the letter is in the word but in the incorrect spot.
* **Gray** if the letter is not in the word.

For example for the word "TOAST" the guess "TARTS" would be

```mermaid
flowchart LR
style 1 fill:green
style 2 fill:gray
style 3 fill:gray
style 4 fill:yellow
style 5 fill:yellow

1[T] --- 2[A] --- 3[R] --- 4[T] --- 5[S]
```

You should be able to start your project by running the following from the `game` folder in
the command line.

```
iex -S mix
```

Given an answer and a guess, your `Games.Wordle` module will provide feedback as a list of color atoms `:green`, `:yellow`, and `:grey`.

<!-- livebook:{"force_markdown":true} -->

```elixir
                    #answer   #guess
iex> Games.World.feedback("aaaaaa", "aaaaaa")
[:green, :green, :green, :green, :green, :green]

iex> Games.World.feedback("aaaaaa", "aaaaab")
[:green, :green, :green, :green, :green, :grey]

iex> Games.World.feedback("abcdef", "fedcba")
[:yellow, :yellow, :yellow, :yellow, :yellow, :yellow]

# If there are duplicate characters in the guess prioritize exact matches.
iex> Games.World.feedback("abcdef", "axxxxa")
[:green, :grey, :grey, :grey, :grey, :grey]

# If there are duplicate characters, the first in the guess should provide `:yellow` feedback if applicable
iex> Games.World.feedback("abcdef", "xxxxaa")
[:grey, :grey, :grey, :grey, :yellow, :grey]
iex> Games.World.feedback("aacdef", "xxxaaa")
[:grey, :grey, :grey, :yellow, :yellow, :grey]
```

Test and implement a `Games.World` module in your [Games](./games_setup.livemd) project.

## Commit Your Progress

Run the following in your command line from the beta_curriculum folder to track and save your progress in a Git commit.

```
$ git add .
$ git commit -m "finish wordle application exercise"
```

## Up Next

| Previous                                             | Next                                   |
| ---------------------------------------------------- | -------------------------------------: |
| [ExUnit With Mix](../reading/exunit_with_mix.livemd) | [Doctests](../reading/doctests.livemd) |
