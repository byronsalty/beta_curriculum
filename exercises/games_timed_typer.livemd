# Games: TimedTyper

```elixir
Mix.install([
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"}
])
```

## Navigation

[Return Home](../start.livemd)<span style="padding: 0 30px"></span>
[Report An Issue](https://github.com/DockYard-Academy/beta_curriculum/issues/new?assignees=&labels=&template=issue.md&title=)

## Setup

Ensure you type the `ea` keyboard shortcut to evaluate all Elixir cells before starting. Alternatively you can evaluate the Elixir cells as you read.

## Games: TimedTyper

In your existing [Games](./games_setup.livemd) project, you're going to create a `Games.TimedTyper` game. Make sure you have already configured the `Games` project with a supervisor. See: [Games: Supervisor](./games_supervisor.livemd).

The `Games.TimedTyper` should be a supervised [GenServer](https://hexdocs.pm/elixir/GenServer.html).

The `Games.TimedTyper` game should prompt the user for input when started.
Remember that you can retrieve input from the console using [IO.get/2](https://hexdocs.pm/elixir/IO.html#get/2).

<!-- livebook:{"force_markdown":true} -->

```elixir
$ iex -S mix
iex> Games.TimedTyper.start()
```

The user must enter the word within five seconds, otherwise the game will print `"You lose!"` then crash and restart.

```
Your word: red
You lose!
```

The same will happen if the user incorrectly spells the word.

```
Your word: red
rde
You lose!
```

The user will be prompted with another word if they correctly type the prompted word within the five second time limit. This will continue until they lose the game.

You may use any random list of words. For example: `["red", "blue", "green", "orange", "yellow", "pink"]`.

```
Your word red
red
Your word blue
blue
Your word green
green
```

## Bonus: Score Tracker

Use the [Games: Score Tracker](games_score_tracker.livemd) to store the player score in memory. For each successfully typed word increment the score in memory. Print the score when the user loses the game.

```
Your word: red
red
Your word: blue
You lose!
Score: 1
```

## Bonus: Countdown

Count down from five in the console as the player enters their word.

```
Your word: red
5
4
3
2
red
Your word: red
5
4
3
2
1
You lose!
Score: 1
Your word: blue
```

## Bonus: Try Again?

Ask the user if they would like to try again or not. Prompt the user with a new word if they say yes.

```
Your word: red
5
4
3
2
1
You Lose!
Score: 0
Try Again? Y/N: Y
Your word: blue
```

Print a thank you message and end the game if they say no.

```
Your word: red
5
4
3
2
1
You Lose!
Score: 0
Try Again? Y/N: Y
Thanks for playing!
iex>
```

## Commit Your Progress

Run the following in your command line from the curriculum folder to track and save your progress in a Git commit.
Ensure that you do not already have undesired or unrelated changes by running `git status` or by checking the source control tab in Visual Studio Code.

```
$ git checkout main
$ git checkout -b exercise-games_timed_typer
$ git add .
$ git commit -m "finish games timed typer exercise"
$ git push origin exercise-games_timed_typer
```

**DockYard Academy Students Only:**

Create a pull request to your forked `main` branch and notify your teacher by including `@BrooklinJazz` in your PR description to get feedback.

If you are interested in joining the next academy cohort, [sign up here](https://academy.dockyard.com/) to receive more news when it is available.

## Up Next

| Previous                                                             | Next                           |
| -------------------------------------------------------------------- | -----------------------------: |
| [Games Supervisor Setup](../exercises/games_supervisor_setup.livemd) | [Task](../reading/task.livemd) |
