# Games: Benchmarking

```elixir
Mix.install([
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"},
  {:tested_cell, github: "brooklinjazz/tested_cell"},
  {:utils, path: "#{__DIR__}/../utils"}
])
```

## Navigation

[Return Home](../start.livemd)<span style="padding: 0 30px"></span>
[Report An Issue](https://github.com/DockYard-Academy/beta_curriculum/issues/new?assignees=&labels=&template=issue.md&title=)

## Games: Benchmarking

In your existing [Games](./games_setup.livemd) project, you're going to benchmark your [Wordle](./games_wordle.livemd) application.

First, add [Benchee](https://github.com/bencheeorg/benchee) to your existing list of dependencies.

You're going to run benchmarks in your ExUnit test suite. Since benchmarks are usually expensive, you'll create a custom `:benchmark` tag and
exclude this tag from tests in `test_helper.exs`.

You should be able to run benchmarks using the `--only=benchmark` or the `--include=benchmark` flag.

```
mix test --only=benchmark
```

Benchmark the `Games.Wordle.feedback/2` function you previously created. Refactor your solution and try to optimize its performance.

## Commit Your Progress

Run the following in your command line from the beta_curriculum folder to track and save your progress in a Git commit.

```
$ git add .
$ git commit -m "finish games benchmarking exercise"
```

## Up Next

| Previous                                                                     | Next                                 |
| ---------------------------------------------------------------------------- | -----------------------------------: |
| [Custom Enum With Recursion](../exercises/custom_enum_with_recursion.livemd) | [Streams](../reading/streams.livemd) |
