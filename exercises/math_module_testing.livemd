# Math Module Testing

```elixir
Mix.install([
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"}
])
```

## Navigation

[Return Home](../start.livemd)<span style="padding: 0 30px"></span>
[Report An Issue](https://github.com/DockYard-Academy/beta_curriculum/issues/new?assignees=&labels=&template=issue.md&title=)

## Setup

Ensure you type the `ea` keyboard shortcut to evaluate all Elixir cells before starting. Alternatively you can evaluate the Elixir cells as you read.

## Math Module Testing

Generally, we can split up our test suite into test cases. Each test case may require many assertions.

For this exercises, we're going to test a `Math` module that abstracts the operators for adding different data types together, like so.

<!-- livebook:{"force_markdown":true} -->

```elixir
Math.add(4, 4) # 
Math.add("a", "b") # "ab"
Math.add([1], [2]) # [1, 2]
```

Our **Happy-path** test cases (where our code is used as expected) could be the following.

`Math.add/2`

* add two integers
* add two strings
* add two lists

`Math.subtract/2`

* subtract two integers
* subtract two strings
* subtract two lists

We also want to consider **edge-case** test cases, also called **sad-path** or **unhappy path** when things go wrong, or the code is misused. For example, we might consider the following cases.

`Math.add/2`

* add a valid data type (integer, string, list) and an invalid data type.
* add two invalid data types.
* add two empty lists.
* add two empty strings.
* add a string by an empty string.
* add a list by an empty list.

`Math.subtract/2`

* subtract a valid data type (integer, string, list) and an invalid data type.
* subtract two invalid data types.
* subtract two empty lists.
* subtract two empty strings.
* subtract a string by an empty string.
* subtract a list by an empty list.

There can be a deceptive number of edge cases to consider. For example, we could build a growing list of edge-case permutations for each data type we want the `Math` module to handle.

Here, we've colored happy path tests green and edge-case tests yellow.

![](images/test%20cases.png)

By planning test cases, we can anticipate possible edge cases and ensure we understand the desired behavior of the feature.

Test and implement a `Math` module. Include at least two assertions for the happy path cases (**strings**, **lists**, and **integers**.)

```elixir
defmodule Math do
  def add(a, b) when is_integer(a) and is_integer(b) do
    a + b
  end

  def add(a, b) when is_binary(a) and is_binary(b) do
    a <> b
  end

  def add(a, b) when is_list(a) and is_list(b) do
    a ++ b
  end

  def add(a, b) do
    {:error, :invalid_input}
  end

  def add!(a, b) do
    result = add(a, b)

    if {:error, :invalid_input} == result do
      raise FunctionClauseError
    else
      result
    end
  end

  def subtract(a, b) when is_integer(a) and is_integer(b) do
    a - b
  end

  def subtract(a, b) when is_binary(a) and is_binary(b) do
    (to_charlist(a) -- to_charlist(b))
    |> to_string()
  end

  def subtract(a, b) when is_list(a) and is_list(b) do
    a -- b
  end

  def subtract(a, b) do
    {:error, :invalid_input}
  end
end
```

```elixir
ExUnit.start(auto_run: false)

defmodule MathTest do
  use ExUnit.Case

  test "Math.add/2 for intergers" do
    assert Math.add(2, 3) == 5
    assert Math.add(-2, 3) == 1
    assert Math.add(0, 3) == 3
  end

  test "Math.add/2 for strings" do
    assert Math.add("Hello ", "World") == "Hello World"
    assert Math.add("", "This") == "This"
    assert Math.add("", "") == ""
  end

  test "Math.add/2 for lists" do
    assert Math.add([1, 2], [3, 4]) == [1, 2, 3, 4]
    assert Math.add(["one", "two"], ["three", "four"]) == ["one", "two", "three", "four"]
    assert Math.add([], [1]) == [1]
    assert Math.add([], []) == []
  end

  test "Math.add/2 for invalid inputs" do
    assert Math.add("Hello ", 1) == {:error, :invalid_input}
    assert Math.add({1, 2}, {3, 4}) == {:error, :invalid_input}
  end

  test "Math.add!/2 valid and invalid inputs" do
    assert Math.add!(1, 3) == 4
    assert_raise FunctionClauseError, fn -> Math.add!("Hello", 1) end
  end

  test "Math.subtract/2 for intergers" do
    assert Math.subtract(3, 2) == 1
    assert Math.subtract(2, 3) == -1
    assert Math.subtract(2, -3) == 5
  end

  test "Math.subtract/2 for strings" do
    assert Math.subtract("abc", "c") == "ab"
    assert Math.subtract("abc", "z") == "abc"
    assert Math.subtract("abc", "") == "abc"
    assert Math.subtract("", "a") == ""
    assert Math.subtract("aabc", "a") == "abc"
    assert Math.subtract("", "") == ""
  end

  test "Math.subtract/2 for lists" do
    assert Math.subtract([1, 2, 3, 4], [3, 4]) == [1, 2]
    assert Math.subtract([1, 2], [1]) == [2]
    assert Math.subtract([1, 2], []) == [1, 2]
    assert Math.subtract([], []) == []
    assert Math.subtract([], [1]) == []
  end

  test "Math.subtract/2 for invalid inputs" do
    assert Math.subtract("Hello", 1) == {:error, :invalid_input}
    assert Math.subtract("Hello", {1, 2}) == {:error, :invalid_input}
    assert Math.subtract({3, 4}, {1, 2}) == {:error, :invalid_input}
  end
end

ExUnit.run()
```

### Bonus: Edge Cases

Decide how to handle calling the `Math.add/2` and `Math.subtract/2` functions with invalid data.
For example, you might raise a [FunctionClauseError](https://hexdocs.pm/elixir/FunctionClauseError.html) using guards.

Note that if you expect to raise an error, it's usually idiomatic to name our functions using a bang `!` symbol, so `Math.add/2` and `Math.subtract/2` should be renamed to `Math.add!/2` and `Math.subtract!/2`.

<!-- livebook:{"force_markdown":true} -->

```elixir
Math.add!(1, 1)
2

Math.add!(%{}, %{})
** (FunctionClauseError) no function clause matching in Math.add/2  
```

Alternatively or in addition, you might choose to change the return value to an `{:ok, value}` tuple or `{:error, error}` tuple.

<!-- livebook:{"force_markdown":true} -->

```elixir
Math.add(%{}, %{})
{:error, :invalid_data}
```

Test and implement these edge cases on your `Math` module above.

## Commit Your Progress

Run the following in your command line from the curriculum folder to track and save your progress in a Git commit.
Ensure that you do not already have undesired or unrelated changes by running `git status` or by checking the source control tab in Visual Studio Code.

```
$ git checkout main
$ git checkout -b exercise-math_module_testing
$ git add .
$ git commit -m "finish math module testing exercise"
$ git push origin exercise-math_module_testing
```

**DockYard Academy Students Only:**

Create a pull request to your forked `main` branch and notify your teacher by including `@BrooklinJazz` in your PR description to get feedback.

If you are interested in joining the next academy cohort, [sign up here](https://academy.dockyard.com/) to receive more news when it is available.

## Up Next

| Previous                           | Next                                                   |
| ---------------------------------- | -----------------------------------------------------: |
| [ExUnit](../reading/exunit.livemd) | [Product Filters](../exercises/product_filters.livemd) |
